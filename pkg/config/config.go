package config

import (
	"errors"
	"math"
	"time"

	"github.com/spf13/viper"

	"gitlab.com/gobl/gobl/pkg/io/strings"
)

const (
	// VersionKey is the configuration key for retrieving application version number
	VersionKey = "version"
	// ServiceNameKey is the configuration key for retrieving the service name
	ServiceNameKey = "service.name"
	// LogFilePathKey is the configuration key for retrieving the path for the log file generated by the service
	LogFilePathKey = "log.filepath"
	// LogLevelKey is the configuration key for retrieving the logging level
	LogLevelKey = "log.level"
	// LogFileMaxSize is the configuration key for retrieving the log file max size configuration
	LogFileMaxSize = "log.max-size"
	// LogFileMaxBackups is the configuration key for retrieving the log file max backups configuration
	LogFileMaxBackups = "log.max-backups"
	// LogFileMaxAge is the configuration key for retrieving the log file max age configuration
	LogFileMaxAge = "log.max-age"
	// LogFileCompress is the configuration key for retrieving the log file compression configuration
	LogFileCompress = "log.compress"
)

var (
	ErrNotFound = errors.New("config not found")
)

// Config is a helper for retrieving properties that have been created in the application's Viper
// configuration file and making it easy to get the data in the right type
type Config struct {
	path []string
}

// Get returns the configuration at the specified path
func Get(path ...string) *Config {
	return &Config{path: path}
}

// String returns the string value of the property or returns the provided default
func (c *Config) String(d string) string {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetString(k)
	}

	return d
}

// Int returns the int value of the property if possible, or returns the provided default
func (c *Config) Int(d int) int {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetInt(k)
	}

	return d
}

// Int8 returns the int8 value of the property if possible, or returns the provided default
func (c *Config) Int8(d int8) int8 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		v := viper.GetInt32(k)

		if v >= math.MinInt8 && v <= math.MaxInt8 {
			return int8(v)
		}
	}

	return d
}

// Int16 returns the int16 value of the property if possible, or returns the provided default
func (c *Config) Int16(d int16) int16 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		v := viper.GetInt32(k)

		if v >= math.MinInt16 && v <= math.MaxInt16 {
			return int16(v)
		}
	}

	return d
}

// Int32 returns the int32 value of the property if possible, or returns the provided default
func (c *Config) Int32(d int32) int32 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetInt32(k)
	}

	return d
}

// Int64 returns the int64 value of the property if possible, or returns the provided default
func (c *Config) Int64(d int64) int64 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetInt64(k)
	}

	return d
}

// Value returns the value of the property as an interface{} if possible, or returns the provided default
func (c *Config) Value(d interface{}) interface{} {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.Get(k)
	}

	return d
}

// Bool returns the bool value of the property if possible, or returns the provided default
func (c *Config) Bool(d bool) bool {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetBool(k)
	}

	return d
}

// Float64 returns the float64 value of the property if possible, or returns the provided default
func (c *Config) Float64(d float64) float64 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetFloat64(k)
	}

	return d
}

// Float32 returns the float32 value of the property if possible, or returns the provided default
func (c *Config) Float32(d float32) float32 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		v := viper.GetFloat64(k)

		if v >= -math.MaxFloat32 && v <= math.MaxFloat32 {
			return float32(v)
		}
	}

	return d
}

// StringMap returns a map[string]interface{} value of the property if possible, or returns the provided default
func (c *Config) StringMap(d map[string]interface{}) map[string]interface{} {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetStringMap(k)
	}

	return d
}

// StringMapString returns a map[string]string value of the property if possible, or returns the provided default
func (c *Config) StringMapString(d map[string]string) map[string]string {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetStringMapString(k)
	}

	return d
}

// StringSlice returns a slice of string values of the property if possible, or returns the provided default
func (c *Config) StringSlice(d []string) []string {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetStringSlice(k)
	}

	return d
}

// Time returns the time value of the property if possible, or returns the provided default
func (c *Config) Time(d time.Time) time.Time {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetTime(k)
	}

	return d
}

// Duration returns the duration value of the property if possible, or returns the provided default
func (c *Config) Duration(d time.Duration) time.Duration {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetDuration(k)
	}

	return d
}

// Uint returns the uint value of the property if possible, or returns the provided default
func (c *Config) Uint(d uint) uint {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetUint(k)
	}

	return d
}

// Uint8 returns the uint8 value of the property if possible, or returns the provided default
func (c *Config) Uint8(d uint8) uint8 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		v := viper.GetUint(k)

		if v <= math.MaxUint8 {
			return uint8(v)
		}
	}

	return d
}

// Uint16 returns the uint16 value of the property if possible, or returns the provided default
func (c *Config) Uint16(d uint16) uint16 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		v := viper.GetUint(k)

		if v <= math.MaxUint16 {
			return uint16(v)
		}
	}

	return d
}

// Uint32 returns the uint32 value of the property if possible, or returns the provided default
func (c *Config) Uint32(d uint32) uint32 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetUint32(k)
	}

	return d
}

// Uint64 returns the uint64 value of the property if possible, or returns the provided default
func (c *Config) Uint64(d uint64) uint64 {
	k := strings.MkString(".", c.path...)

	if viper.IsSet(k) {
		return viper.GetUint64(k)
	}

	return d
}

type Configuration interface {
	Validate() error
}

func ReadConfigFromFile[D Configuration, C *D](key string, config C, defaultConfig D) error {
	v := viper.Sub(key)
	if v == nil {
		*config = defaultConfig
		return ErrNotFound
	}

	if err := v.Unmarshal(config); err != nil {
		*config = defaultConfig
		return err
	}

	if err := (*config).Validate(); err != nil {
		*config = defaultConfig
		return err
	}

	return nil
}
